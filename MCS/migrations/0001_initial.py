# Generated by Django 2.1.3 on 2018-12-15 16:56

import MCS.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='員工編號')),
                ('title', models.CharField(max_length=8, verbose_name='員工職稱')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('member_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='會員編號')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_TW', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1}[1-2]{1}[0-9]{8}$')], verbose_name='在台灣的身分證號碼')),
                ('phone_number', models.CharField(default='', max_length=15, validators=[django.core.validators.RegexValidator('^[0-9+()-]+$')], verbose_name='使用者電話號碼')),
                ('address', models.CharField(default='', max_length=80, verbose_name='使用者住址')),
                ('age', models.PositiveIntegerField(blank=True, default=0, verbose_name='使用者年齡')),
                ('gender', models.CharField(choices=[('F', '女'), ('M', '男')], default='M', max_length=1, verbose_name='使用者性別')),
                ('discount', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0, '0<=使用者折扣<=1'), django.core.validators.MaxValueValidator(1, '0<=使用者折扣<=1')], verbose_name='使用者折扣')),
                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False, verbose_name='email address')),
                ('last_name', models.CharField(default='', max_length=4, verbose_name='姓')),
                ('first_name', models.CharField(default='', max_length=8, verbose_name='名')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', MCS.models.CustomUserManager()),
            ],
        ),
        migrations.AddField(
            model_name='member',
            name='user_id',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Member', to=settings.AUTH_USER_MODEL, verbose_name='會員的使用者編號'),
        ),
        migrations.AddField(
            model_name='employee',
            name='user_id',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Employee', to=settings.AUTH_USER_MODEL, verbose_name='會員的使用者編號'),
        ),
    ]
